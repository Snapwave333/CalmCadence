use std::env;
use std::fs;
use std::path::Path;

fn main() {
  let out_dir = env::var("OUT_DIR").unwrap();
  let dest_path = Path::new(&out_dir).join("compiled_shader.wgsl");

  // Define shader modules in the order they should be concatenated
  let shader_modules = vec![
    // Common utilities
    "src/shader_common/uniforms.wgsl",
    "src/shader_common/color_utils.wgsl",
    "src/shader_common/color_modes.wgsl",
    // Pattern implementations
    "src/shader_patterns/plasma.wgsl",
    "src/shader_patterns/waves.wgsl",
    "src/shader_patterns/ripples.wgsl",
    "src/shader_patterns/vortex.wgsl",
    "src/shader_patterns/noise.wgsl",
    "src/shader_patterns/geometric.wgsl",
    "src/shader_patterns/voronoi.wgsl",
    "src/shader_patterns/truchet.wgsl",
    "src/shader_patterns/hexagonal.wgsl",
    "src/shader_patterns/interference.wgsl",
    "src/shader_patterns/fractal.wgsl",
    "src/shader_patterns/glitch.wgsl",
    "src/shader_patterns/spiral.wgsl",
    "src/shader_patterns/rings.wgsl",
    "src/shader_patterns/grid.wgsl",
    "src/shader_patterns/diamonds.wgsl",
    "src/shader_patterns/sphere.wgsl",
    "src/shader_patterns/octgrams.wgsl",
    "src/shader_patterns/warped_fbm.wgsl",
    // Effects and main entry point
    "src/shader_common/effects.wgsl",
    "src/shader_common/beat_distortion.wgsl",
    "src/shader_common/main.wgsl",
  ];

  let mut combined_shader = String::new();

  combined_shader.push_str("// Auto-generated shader - DO NOT EDIT\n");
  combined_shader.push_str("// Generated by build.rs from modular shader sources\n\n");

  for module_path in &shader_modules {
    // Tell cargo to rerun if any shader file changes
    println!("cargo:rerun-if-changed={}", module_path);

    let content = fs::read_to_string(module_path)
      .unwrap_or_else(|err| panic!("Failed to read {}: {}", module_path, err));

    combined_shader.push_str(&format!("\n// ==== {} ====\n\n", module_path));
    combined_shader.push_str(&content);
    combined_shader.push('\n');
  }

  fs::write(&dest_path, combined_shader).expect("Failed to write combined shader file");

  println!("cargo:warning=Compiled shader written to {:?}", dest_path);
}
