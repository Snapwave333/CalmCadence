name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: chroma-linux-x86_64
            artifact_ext: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: chroma-linux-x86_64-musl
            artifact_ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: chroma-macos-x86_64
            artifact_ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: chroma-macos-aarch64
            artifact_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: chroma-windows-x86_64
            artifact_ext: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev musl-tools

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --all-features

      - name: Create release artifact
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/${{ matrix.target }}/release/chroma.exe release/
            cd release
            zip -r ../${{ matrix.artifact_name }}.${{ matrix.artifact_ext }} *
            cd ..
          else
            cp target/${{ matrix.target }}/release/chroma release/
            cd release
            tar -czf ../${{ matrix.artifact_name }}.${{ matrix.artifact_ext }} *
            cd ..
          fi

      - name: Generate checksums
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }} SHA256 > ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}.sha256
          else
            sha256sum ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }} > ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}.sha256
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}
            ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}.sha256
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        shell: bash
        run: |
          mkdir -p release-files
          for artifact_dir in artifacts/*/; do
            artifact_name=$(basename "$artifact_dir")
            cp "$artifact_dir"/* release-files/
          done
          
          # Create combined checksums file
          cd release-files
          find . -name "*.sha256" -exec cat {} \; > checksums.txt
          cd ..

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changelog section for this version
          VERSION="${{ steps.version.outputs.VERSION }}"
          CHANGELOG_SECTION=$(awk "/^## Version ${VERSION#v}/,/^## Version /" CHANGELOG.md | head -n -1)
          
          # Create release notes
          cat > release_notes.md << EOF
          ## ðŸŽ¯ Chroma v${VERSION#v} - Autonomous VJ Core Release
          
          This release introduces the **Autonomous VJ Core** - a fully autonomous virtual VJ that creates dynamic, music-reactive visual experiences without any user intervention.
          
          ### ðŸš€ Key Features
          - **Macro-State Engine (MSE)**: Intelligent pattern/palette transitions based on audio analysis
          - **Advanced Audio Processing**: Beat detection, BPM analysis, and frequency band mapping
          - **Cross-Pattern Morphing**: GPU-accelerated smooth transitions between shaders
          - **Professional Quality**: Production-ready autonomous performance system
          
          ### ðŸ“¦ Installation
          
          **Pre-built Binaries:**
          Download the appropriate binary for your platform from the assets below.
          
          **From Source:**
          \`\`\`bash
          cargo install chroma
          \`\`\`
          
          ### ðŸŽ® Usage
          \`\`\`bash
          # Launch autonomous VJ
          chroma
          
          # With audio features
          chroma --features audio
          \`\`\`
          
          ### ðŸ“Š Performance
          - **2000+ FPS** rendering on modern GPUs
          - **Sub-millisecond** audio analysis latency
          - **Cross-platform** support (Windows, macOS, Linux)
          
          ---
          
          $CHANGELOG_SECTION
          EOF
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Chroma ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
