name: Build and Test CalmCadence

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'CalmCadence.sln'
  TEST_PROJECT: 'CalmCadence.Tests/CalmCadence.Tests.csproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Prepare version (tag builds)
      shell: pwsh
      run: |
        $refType = "${{ github.ref_type }}"
        $refName = "${{ github.ref_name }}"
        if ($refType -eq 'tag' -and $refName -match '^v\d+\.\d+\.\d+') {
          $base = $refName.TrimStart('v')
          $msix = "$base.${{ github.run_number }}"
          "VERSION=$base" | Out-File -FilePath $env:GITHUB_ENV -Append
          "ASSEMBLY_INFO_VERSION=$base+${{ github.sha }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          "MSIX_VERSION=$msix" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Prepared VERSION=$base MSIX_VERSION=$msix"
        } else {
          Write-Host 'Not a tag build; using default versioning'
        }

    - name: Build solution
      shell: pwsh
      run: |
        $props = @()
        if ($env:VERSION) {
          $props += "/p:Version=$env:VERSION"
        }
        if ($env:ASSEMBLY_INFO_VERSION) {
          $props += "/p:AssemblyInformationalVersion=$env:ASSEMBLY_INFO_VERSION"
        }
        $propsString = $props -join ' '
        dotnet build $env:SOLUTION_FILE --configuration Release --verbosity minimal $propsString

    - name: Run tests
      run: dotnet test ${{ env.TEST_PROJECT }} --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/*.trx'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: '**/bin/Release/**'

  package-msix:
    name: Package & Sign MSIX (Release)
    runs-on: windows-latest
    needs: build-and-test
    strategy:
      matrix:
        platform: [ x64, ARM64 ]
    env:
      CONFIGURATION: Release
      APP_PROJECT: CalmCadence.App/CalmCadence.App.csproj
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore solution
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Prepare version (tag builds)
        shell: pwsh
        run: |
          $refType = "${{ github.ref_type }}"
          $refName = "${{ github.ref_name }}"
          if ($refType -eq 'tag' -and $refName -match '^v\d+\.\d+\.\d+') {
            $base = $refName.TrimStart('v')
            $msix = "$base.${{ github.run_number }}"
            "VERSION=$base" | Out-File -FilePath $env:GITHUB_ENV -Append
            "ASSEMBLY_INFO_VERSION=$base+${{ github.sha }}" | Out-File -FilePath $env:GITHUB_ENV -Append
            "MSIX_VERSION=$msix" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "Prepared VERSION=$base MSIX_VERSION=$msix"
          } else {
            Write-Host 'Not a tag build; using default versioning'
          }

      - name: Publish MSIX (${{ matrix.platform }})
        shell: pwsh
        run: |
          $platform = "${{ matrix.platform }}"
          $props = @("/p:Configuration=${{ env.CONFIGURATION }}", "/p:Platform=$platform", "/p:PublishProfile=win-$platform.pubxml")
          if ($env:VERSION) { $props += "/p:Version=$env:VERSION" }
          if ($env:ASSEMBLY_INFO_VERSION) { $props += "/p:AssemblyInformationalVersion=$env:ASSEMBLY_INFO_VERSION" }
          if ($env:MSIX_VERSION) { $props += "/p:AppxPackageVersion=$env:MSIX_VERSION" }
          $args = $props + @('/t:Publish', '/m', '/verbosity:minimal')
          & msbuild "${{ env.APP_PROJECT }}" $args

      - name: Locate MSIX output (${{ matrix.platform }})
        id: locate_msix
        shell: pwsh
        run: |
          $platform = "${{ matrix.platform }}"
          $config = "${{ env.CONFIGURATION }}"
          $root = Join-Path (Get-Location) 'CalmCadence.App\\bin'
          $pattern = "$root\\$config\\**\\$platform\\**\\*.msix*"
          Write-Host "Searching for MSIX with pattern: $pattern"
          $files = Get-ChildItem -Path $root -Filter *.msix* -Recurse -File | Where-Object { $_.FullName -match "$platform" }
          if (-not $files -or $files.Count -eq 0) {
            Write-Error "No MSIX found for platform $platform under $root"
          }
          $msix = $files[0].FullName
          Write-Host "Found MSIX: $msix"
          "msix_path=$msix" >> $env:GITHUB_OUTPUT

      - name: Decode signing certificate (optional)
        if: ${{ secrets.BASE64_ENCODED_PFX != '' }}
        id: decode_pfx
        shell: pwsh
        run: |
          $pfxBase64 = "${{ secrets.BASE64_ENCODED_PFX }}"
          if (-not [string]::IsNullOrEmpty($pfxBase64)) {
            $outPath = Join-Path $env:RUNNER_TEMP 'signcert.pfx'
            [System.IO.File]::WriteAllBytes($outPath, [System.Convert]::FromBase64String($pfxBase64))
            Write-Host "Decoded PFX to: $outPath"
            "pfx_path=$outPath" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No BASE64_ENCODED_PFX secret provided; skipping decode"
          }

      - name: Sign MSIX with SignTool (optional)
        if: ${{ secrets.BASE64_ENCODED_PFX != '' }}
        shell: pwsh
        run: |
          $msix = "${{ steps.locate_msix.outputs.msix_path }}"
          $pfx = "${{ steps.decode_pfx.outputs.pfx_path }}"
          $password = "${{ secrets.PFX_PASSWORD }}"
          if ([string]::IsNullOrWhiteSpace($pfx)) { Write-Error "PFX path not set" }
          $signtool = (Get-Command signtool.exe -ErrorAction SilentlyContinue).Source
          if (-not $signtool) { Write-Error "signtool.exe not found on PATH; ensure Windows SDK is available on the runner" }
          $timestampUrl = 'http://timestamp.digicert.com'
          if ([string]::IsNullOrWhiteSpace($password)) {
            & $signtool sign /fd SHA256 /f $pfx /t $timestampUrl $msix
          } else {
            & $signtool sign /fd SHA256 /f $pfx /p $password /t $timestampUrl $msix
          }
          Write-Host "Signed MSIX: $msix"

      - name: Upload MSIX artifact (${{ matrix.platform }})
        uses: actions/upload-artifact@v4
        with:
          name: CalmCadence-${{ matrix.platform }}-MSIX
          path: ${{ steps.locate_msix.outputs.msix_path }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: package-msix
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Verify GITHUB_TOKEN permissions
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GITHUB_TOKEN is not available. Ensure Actions can create releases (Repository Settings → Actions → Workflow permissions)." >&2
            exit 1
          fi
      - name: Download x64 MSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: CalmCadence-x64-MSIX
          path: artifacts/x64

      - name: Download ARM64 MSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: CalmCadence-ARM64-MSIX
          path: artifacts/arm64

      - name: Compute SHA256 checksums
        run: |
          mkdir -p artifacts/checksums
          for f in artifacts/x64/*.msix artifacts/arm64/*.msix; do
            fname=$(basename "$f")
            sha256sum "$f" > "artifacts/checksums/$fname.sha256"
          done

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: CalmCadence ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
          files: |
            artifacts/x64/*.msix
            artifacts/arm64/*.msix
            artifacts/checksums/*.sha256
permissions:
  contents: write
